{"version":3,"sources":["../../../src/local/tests/component.js"],"names":["Test","eventName","reactive","Reactive","name","eventDispatch","mutations","alter","statemanager","value","state","setReadOnly","detail","target","document","dispatchEvent","CustomEvent","bubbles","test1","addAssert","Sample","descriptor","test","assertTrue","element","BaseComponent","init","setInitialState","sample","watch","handler","dispatch","sampleUpdated","selectors","some","component","assertEquals","getSelector","addSelectors","test2","addEventListener","test3","test4","clicknow","click","events","sampleevent","_clickevent","removeAllEventListeners","getEvents","useelement","usereactive","expectException","withoutelement","withoutreactive","withoutreactiveandelement","JSON","stringify","unregister","fakenode","createElement","dataset","tocheck","appendChild","observer","MutationObserver","mutationsList","forEach","change","removedNodes","node","observe","childList","remove","triggers","removeEventListener","all","one","none","TestBase"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/statevalues\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent, Reactive} from 'core/reactive';\nimport TestBase from 'format_editortest/local/tests/testbase';\n\nclass Test extends TestBase {\n\n    /**\n     * Function to prepare test scenario.\n     */\n    setUp() {\n        // Create a generic reactive module without state.\n        this.eventName = 'reactive_changed';\n\n        this.reactive = new Reactive({\n            name: 'Test',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            mutations: {\n                // A generic function to alter the state.\n                alter: (statemanager, name, value) => {\n                    const state = statemanager.state;\n                    statemanager.setReadOnly(false);\n                    state[name].value = value;\n                    statemanager.setReadOnly(true);\n                },\n            },\n        });\n    }\n\n    /**\n     * Auxiliar event dispatch method required by the reactive component..\n     *\n     * @param {*} detail the detail data\n     * @param {*} target the element target\n     */\n    eventDispatch(detail, target) {\n        if (target === undefined) {\n            target = document;\n        }\n        target.dispatchEvent(new CustomEvent('reactive_changed', {\n            bubbles: false,\n            detail: detail,\n        }));\n    }\n\n    /**\n     * Test create method.\n     */\n    testCreate() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n    }\n\n\n    /**\n     * Test state ready trigger.\n     */\n    testStateReady() {\n        const test1 = this.addAssert('Initial state ready event');\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                // We need the test as a component attribute to do asserts.\n                this.test = descriptor.test;\n            }\n\n            stateReady() {\n                this.test.assertTrue(test1, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test get watchers.\n     */\n    testGetWatchers() {\n        const test1 = this.addAssert('Watchers works with state mutations');\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                // We need the test as a component attribute to do asserts.\n                this.test = descriptor.test;\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'sample.value:updated',\n                        handler: ({element}) => {\n                            this.test.assertTrue(test1, element.value === 'Perfect');\n                        }\n                    },\n                ];\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n        this.reactive.dispatch('alter', 'sample', 'Perfect');\n    }\n\n    /**\n     * Check that \"this\" in watchers is mantained.\n     */\n    testGetWatchersKeepThis() {\n        const test1 = this.addAssert('Watchers works with state mutations');\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                // We need the test as a component attribute to do asserts.\n                this.test = descriptor.test;\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'sample.value:updated',\n                        handler: this.sampleUpdated,\n                    },\n                ];\n            }\n\n            sampleUpdated({element}) {\n                this.test.assertTrue(test1, element.value === 'Perfect');\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n        this.reactive.dispatch('alter', 'sample', 'Perfect');\n    }\n\n    /**\n     * Test addSelectors\n     */\n    testAddSelectors() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.selectors = {\n                    some: 'selectorvalue',\n                };\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        this.assertEquals(null, 'selectorvalue', component.getSelector('some'));\n\n        component.addSelectors({some: 'newvalue'});\n\n        this.assertEquals(null, 'newvalue', component.getSelector('some'));\n    }\n\n    /**\n     * Test addSelectors\n     */\n    testAddSelectorsOnCreate() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.selectors = {\n                    some: 'selectorvalue',\n                };\n            }\n\n            static init(test, reactive, element, selectors) {\n                return new Sample({\n                    element,\n                    reactive,\n                    selectors,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target, {some: 'newvalue'});\n\n        this.assertEquals(null, 'newvalue', component.getSelector('some'));\n    }\n\n    /**\n     * Test dispatch event.\n     */\n    testDispatchEvent() {\n        const test1 = this.addAssert('Component create hook executed', false);\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        const test2 = this.addAssert('Custom event dispatched', false);\n\n        this.target.addEventListener('testevent', ({detail}) => {\n            this.assertTrue(test2, detail.value == 'Perfect!');\n        });\n\n        component.dispatchEvent('testevent', {value: 'Perfect!'});\n    }\n\n    /**\n     * Test the typical dispatch event workflow.\n     */\n    testDispatchEventTypicalFlow() {\n        const test1 = this.addAssert('Component create hook executed', false);\n        const test2 = this.addAssert('State ready triggered', false);\n        const test3 = this.addAssert('Click event triggered', false);\n        const test4 = this.addAssert('Custom event triggered', false);\n\n        // We don't have a user so we give the component a method to simulate the used action when it is ready.\n        const clicknow = () => {\n            this.target.click();\n        };\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n                // Init events list.\n                this.events = {\n                    sampleevent: 'sampleevent',\n                };\n            }\n\n            stateReady() {\n                this.test.assertTrue(test2, true);\n                // Bind some user actions.\n                this.addEventListener(this.element, 'click', this._clickevent);\n                // Now we sumilate a user click.\n                clicknow();\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            _clickevent() {\n                this.test.assertTrue(test3, true);\n                // Trigger custom event. Typically before this it will be some mutation or extra logic.\n                this.dispatchEvent(this.events.sampleevent, {value: 'Perfect!'});\n\n                // We are done with the test. We can remove the listener.\n                this.removeAllEventListeners();\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        // As a parent component we want to listen the custom event.\n        this.target.addEventListener(component.getEvents().sampleevent, ({detail}) => {\n            this.assertTrue(test4, detail.value == 'Perfect!');\n        });\n\n        // Initialize reactive state to trigger ready state.\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test descriptor exceptions when creating a new component.\n     *\n     * @param {boolean} useelement use a valid element\n     * @param {boolean} usereactive use a valid reactive\n     */\n    testDescriptorExceptions({useelement, usereactive}) {\n        const element = (useelement) ? this.target : undefined;\n        const reactive = (usereactive) ? this.reactive : undefined;\n\n        this.expectException();\n\n        new BaseComponent({\n            element,\n            reactive,\n        });\n    }\n\n    dataProviderTestDescriptorExceptions() {\n        return {\n            withoutelement: {useelement: false, usereactive: true},\n            withoutreactive: {useelement: true, usereactive: false},\n            withoutreactiveandelement: {useelement: true, usereactive: false},\n        };\n    }\n\n    /**\n     * Test static and non-static getEvents.\n     */\n    testGetEvents() {\n\n        class Sample extends BaseComponent {\n\n            static getEvents() {\n                return {\n                    sampleevent: 'this_event_is_mine',\n                };\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        // Check both getEvents returns the same results.\n        this.assertEquals(null, JSON.stringify(Sample.getEvents()), JSON.stringify(component.getEvents()));\n    }\n\n    /**\n     * Test unregister component.\n     */\n    testUnregister() {\n        const test1 = this.addAssert('Component create hook executed', false);\n        const test2 = this.addAssert('Component destroy executed', false);\n        const test3 = this.addAssert('Component does not watch the state', true);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n            }\n\n            destroy() {\n                this.test.assertTrue(test2, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'sample.value:updated',\n                        handler: this.sampleUpdated,\n                    },\n                ];\n            }\n\n            sampleUpdated() {\n                this.test.assertTrue(test3, false);\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, this.target);\n\n        component.unregister();\n\n        this.reactive.dispatch('alter', 'sample', 'Perfect');\n    }\n\n    /**\n     * Test remove component.\n     */\n    testRemove() {\n        const test1 = this.addAssert('Component create hook executed', false);\n        const test2 = this.addAssert('Component destroy executed', false);\n        const test3 = this.addAssert('Component does not watch the state', true);\n        const test4 = this.addAssert('DOM element is removed', false);\n\n        const fakenode = document.createElement('span');\n        fakenode.dataset.tocheck = 'testRemove';\n        this.target.appendChild(fakenode);\n\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n            }\n\n            destroy() {\n                this.test.assertTrue(test2, true);\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'sample.value:updated',\n                        handler: this.sampleUpdated,\n                    },\n                ];\n            }\n\n            sampleUpdated() {\n                this.test.assertTrue(test3, false);\n            }\n        }\n\n        const component = Sample.init(this, this.reactive, fakenode);\n\n        const test = this;\n\n        // Test the element is removed.\n        const observer = new MutationObserver((mutationsList) => {\n            mutationsList.forEach(change => {\n                change.removedNodes.forEach((node) => {\n                    if (node.dataset.tocheck == 'testRemove') {\n                        test.assertTrue(test4, true);\n                    }\n                });\n            });\n\n        });\n        observer.observe(this.target, {childList: true});\n\n        component.remove();\n\n        this.reactive.dispatch('alter', 'sample', 'Perfect');\n    }\n\n    /**\n     * Test removeEventListener and removeAllEventListeners method.\n     *\n     * @param {object} scenario the scenario with settings:\n     * - remove (all, one, none) indicating the event listeners to remove\n     * - triggers (true/false) indicating if the event must be captures or not\n     */\n    testRemoveEventListeners({remove, triggers}) {\n        const test1 = this.addAssert('Component create hook executed', false);\n        const test2 = this.addAssert('State ready triggered', false);\n        const test3 = this.addAssert('Click event triggered', false);\n        const test4 = this.addAssert('Custom event captured only if is registered', !triggers);\n\n        // We don't have a user so we give the component a method to simulate the used action when it is ready.\n        const clicknow = () => {\n            this.assertTrue(test3, true);\n            this.target.click();\n        };\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n                // Init events list.\n                this.events = {\n                    sampleevent: 'sampleevent',\n                };\n            }\n\n            stateReady() {\n                this.test.assertTrue(test2, true);\n                // Bind some user actions.\n                this.addEventListener(this.element, 'click', this._clickevent);\n                // Remove listeners.\n                if (remove == 'all') {\n                    this.removeAllEventListeners();\n                }\n                if (remove == 'one') {\n                    this.removeEventListener(this.element, 'click', this._clickevent);\n                }\n                // Now we sumilate a user click.\n                clicknow();\n            }\n\n            static init(test, reactive, element) {\n                return new Sample({\n                    element,\n                    reactive,\n                    test,\n                });\n            }\n\n            _clickevent() {\n                this.test.assertTrue(test4, triggers);\n                // In any case, if we are here we can unregister all events.\n                this.removeAllEventListeners();\n            }\n        }\n\n        Sample.init(this, this.reactive, this.target);\n\n        // Initialize reactive state to trigger ready state.\n        this.reactive.setInitialState({\n            sample: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Data provider for testRemoveEventListeners.\n     *\n     * @returns {object} the testing scenarios\n     */\n    dataProviderTestRemoveEventListeners() {\n        return {\n            // Remove all listeners.\n            all: {remove: 'all', triggers: false},\n            // Remove just one listener.\n            one: {remove: 'one', triggers: false},\n            // Don't remove any listeners.\n            none: {remove: 'none', triggers: true},\n        };\n    }\n\n}\n\nexport default new Test();\n"],"file":"component.min.js"}
{"version":3,"sources":["../../../src/local/tests/reactive.js"],"names":["Test","eventName","detail","target","document","dispatchEvent","CustomEvent","bubbles","test1","addAssert","reactive","Reactive","name","eventDispatch","state","tocheck","value","mutations","registerComponent","stateReady","assertTrue","setInitialState","expectException","passTest","statemanager","param1","param2","dispatch","test2","alter","newvalue","setReadOnly","getWatchers","watch","handler","element","watcher","nowatch","nohandler","mutation","somemutation","Error","_privatemethod","error","throwerror","privatemethod","nonstring","innexistentmethod","test3","original","modified","addMutations","newmutation","NewMutations","test","testid","setMutations","log","debug","test4","addEventListener","test5","test6","reactive1","tocheck2","reactive2","assertEquals","watchers","correct","twice","component","dispatchRegistrationSuccess","dispatchRegistrationFail","correcttwice","nowatchwatcher","nowatchwatchertwice","nohandlewatcher","nohandlewatchertwice","value1","value2","prop","unregisterComponent","TestBase"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/reactive\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {Reactive} from 'core/reactive';\nimport TestBase from 'format_editortest/local/tests/testbase';\nimport log from 'core/log';\n\nclass Test extends TestBase {\n\n    /**\n     * Function to prepare test scenario.\n     */\n    setUp() {\n        this.eventName = 'reactive_changed';\n    }\n\n    /**\n     * Auxiliar event dispatch method required by the reactive component..\n     *\n     * @param {*} detail the detail data\n     * @param {*} target the element target\n     */\n    eventDispatch(detail, target) {\n        if (target === undefined) {\n            target = document;\n        }\n        target.dispatchEvent(new CustomEvent('reactive_changed', {\n            bubbles: false,\n            detail: detail,\n        }));\n    }\n\n    /**\n     * Test the creation of a Reactive module and checks stateReady is called.\n     */\n    testCreation() {\n        const test1 = this.addAssert('Create a new reactive instance');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            target: this.target,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n    }\n\n    /**\n     * Check that stateReady is called even if the initial state is set after\n     * the component registration.\n     */\n    testSetInitialState() {\n        const test1 = this.addAssert('Initial state after creationt');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            target: this.target,\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Check that initialState cannot be used when the initial state is passed on creation.\n     */\n    testSetInitialStateWrong() {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            target: this.target,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        this.expectException();\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Check that initial state cannot be set twice.\n     */\n    testSetInitialStateTwice() {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            target: this.target,\n            mutations: {},\n        });\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n\n        this.expectException();\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Check a reactive module can be created without a DOM element.\n     */\n    testWithoutTarget() {\n        const test1 = this.addAssert('Instantiate reactive without a DOM target');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n    }\n\n    /**\n     * Check stateReady is called only when the state is really ready.\n     */\n    testStateReady() {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            mutations: {},\n        });\n\n        reactive.registerComponent({\n            stateReady: (state) => {\n                this.assertTrue(test1, state.tocheck.value === 'OK');\n            }\n        });\n\n        const test1 = this.addAssert('Components stateReady should be called when the state is ready');\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test mutations.\n     */\n    testMutations() {\n        const test1 = this.addAssert('Call mutations from a component');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                passTest: (statemanager, param1, param2) => {\n                    const state = statemanager.state;\n                    this.assertTrue(test1, state.tocheck.value === 'OK' && param1 === 'Q' && param2 === true);\n                },\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                reactive.dispatch('passTest', 'Q', true);\n            },\n        });\n    }\n\n    /**\n     * Test state watchers.\n     */\n    testWatchers() {\n        const test1 = this.addAssert('Test attribute watcher');\n        const test2 = this.addAssert('Test general watcher');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setReadOnly(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setReadOnly(true);\n                },\n            },\n        });\n\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck.value:updated',\n                    handler: ({element}) => {\n                        this.assertTrue(test1, element.value === 'Perfect');\n                    }\n                },\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({element}) => {\n                        this.assertTrue(test2, element.value === 'Perfect');\n                    }\n                },\n            ],\n            stateReady: () => {\n                reactive.dispatch('alter', 'Perfect');\n            }\n        });\n    }\n\n    /**\n     * Test exceptions when registering a watcher.\n     *\n     * @param {object} watcher invalid watcher data\n     */\n    testWrongWatchers(watcher) {\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n        });\n\n        this.expectException();\n\n        reactive.registerComponent({\n            getWatchers: () => [watcher],\n        });\n    }\n\n    dataProviderTestWrongWatchers() {\n        return {\n            nowatch: {\n                handler: () => {\n                    return true;\n                }\n            },\n            nohandler: {\n                watch: 'tocheck.value:updated',\n            },\n        };\n    }\n\n    /**\n     * Test exceptions on mutations.\n     */\n    testMutationException({mutation}) {\n        const test1 = this.addAssert('A mutation throws an exception.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                somemutation: () => {\n                    throw Error('Ups!');\n                },\n                _privatemethod: () => {\n                    this.assertTrue(test1, false);\n                },\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                // This function is executed in a promise, we cannot use this.expectException();\n                try {\n                    reactive.dispatch(mutation, 'Q', true);\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n            },\n        });\n    }\n\n    /**\n     *\n     * Data provider for dispatch mutation exceptions.\n     *\n     * @returns {object} Testing scenarios\n     */\n    dataProviderTestMutationException() {\n        return {\n            // Mutations can throw errors.\n            throwerror: {\n                mutation: 'somemutation',\n            },\n            // Private methods cannot be dispatched.\n            privatemethod: {\n                mutation: '_privatemethod',\n            },\n            // Action names must be strings.\n            nonstring: {\n                mutation: {name: 'wrong'},\n            },\n            // Innexistent mutation name.\n            innexistentmethod: {\n                mutation: 'notTheDroidYouAreLookingFor',\n            },\n        };\n    }\n\n    /**\n     * Test add mutations functions.\n     */\n    testAddMutations() {\n        const test1 = this.addAssert('Call an original mutaiton after adding new ones.');\n        const test2 = this.addAssert('Call an overridden mutation.');\n        const test3 = this.addAssert('Call an added mutation.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                original: () => {\n                    this.assertTrue(test1, true);\n                },\n                modified: () => {\n                    this.assertTrue(test2, false);\n                },\n            },\n        });\n        reactive.addMutations({\n            modified: () => {\n                this.assertTrue(test2, true);\n            },\n            newmutation: () => {\n                this.assertTrue(test3, true);\n            },\n        });\n        reactive.registerComponent({\n            stateReady: () => {\n                reactive.dispatch('original');\n                reactive.dispatch('modified');\n                reactive.dispatch('newmutation');\n            },\n        });\n    }\n\n    /**\n         * Test set mutations class.\n         */\n    testSetMutations() {\n        const test1 = this.addAssert('Mutation class can be overridden', false);\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: () => {\n                    this.assertTrue(test1, false);\n                },\n            },\n        });\n\n        // Auxiliar mutation class.\n        class NewMutations {\n\n            constructor(test) {\n                this.test = test;\n            }\n\n            alter(statemanager, testid) {\n                this.test.assertTrue(testid, true);\n            }\n        }\n\n        reactive.setMutations(new NewMutations(this));\n\n        reactive.dispatch('alter', test1);\n    }\n\n    /**\n     * Test get state.\n     */\n    testGetState() {\n        const test1 = this.addAssert('Call get state');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n        });\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n        this.assertTrue(test1, reactive.state.tocheck.value === 'OK');\n    }\n\n    /**\n     * Test exceptions when a component tries to modify the state.\n     */\n    testWriteStateFromComponent() {\n        const test1 = this.addAssert('Components cannot write in the state from stateReady.');\n        const test2 = this.addAssert('Components cannot write in the state from watchers.');\n        const test3 = this.addAssert('Components cannot write in the element from watchers.');\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'OK'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setReadOnly(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setReadOnly(true);\n                },\n            },\n        });\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({state, element}) => {\n                        // This function is executed in an event, we cannot use this.expectException();\n                        try {\n                            state.tocheck.value = 'Nope';\n                            this.assertTrue(test2, false);\n                        } catch (error) {\n                            this.assertTrue(test2, true);\n                        }\n                        try {\n                            element.value = 'Nope';\n                            log.debug(element);\n                            this.assertTrue(test3, false);\n                        } catch (error) {\n                            this.assertTrue(test3, true);\n                        }\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                // This function is executed in a promise, we cannot use this.expectException();\n                try {\n                    state.tocheck.value = 'Nope';\n                    this.assertTrue(test1, false);\n                } catch (error) {\n                    this.assertTrue(test1, true);\n                }\n                // Change value using mutation.\n                reactive.dispatch('alter', 'Perfect');\n            },\n        });\n    }\n\n    /**\n     * Test evenet bubbling.\n     */\n    testEventBubble() {\n        const test1 = this.addAssert('General state change triggered.');\n        const test2 = this.addAssert('General state change bubbles.', true);\n        const test3 = this.addAssert('Private state watcher event trigger.');\n        const test4 = this.addAssert('Private state watcher change does not bubble.', true);\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setReadOnly(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setReadOnly(true);\n                },\n            },\n        });\n        document.addEventListener('tocheck:updated', () => {\n            this.assertTrue(test2, false);\n        });\n        document.addEventListener('tocheck.value:updated', () => {\n            this.assertTrue(test4, false);\n        });\n\n        reactive.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: () => {\n                        this.assertTrue(test1, true);\n                    }\n                },\n                {\n                    watch: 'tocheck.value:updated',\n                    handler: () => {\n                        this.assertTrue(test3, true);\n                    }\n                },\n            ],\n            stateReady: () => {\n                reactive.dispatch('alter', 'Perfect');\n            }\n        });\n\n        reactive.setInitialState({\n            tocheck: {value: 'OK'},\n        });\n    }\n\n    /**\n     * Test reactives instances does not interfere which each other.\n     */\n    testSimultaneousReactives() {\n        const test1 = this.addAssert('Reactive instance 1 execute the correct stateReady.');\n        const test2 = this.addAssert('Reactive instance 2 execute the correct stateReady.');\n        const test3 = this.addAssert('Watcher 1 works with reactive 1 changes.');\n        const test4 = this.addAssert('Watcher 2 ignore reactive 1 changes.', true);\n        const test5 = this.addAssert('Watcher 1 ignore reactive 2 changes.', true);\n        const test6 = this.addAssert('Watcher 2 works with reactive 2 changes.');\n\n        const reactive1 = new Reactive({\n            name: 'TestReactive1',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'reactive1'},\n                tocheck2: {value: 'reactive1'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setReadOnly(false);\n                    state.tocheck.value = newvalue;\n                    statemanager.setReadOnly(true);\n                },\n            },\n        });\n\n        const reactive2 = new Reactive({\n            name: 'TestReactive2',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value: 'reactive2'},\n                tocheck2: {value: 'reactive2'},\n            },\n            mutations: {\n                alter: (statemanager, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setReadOnly(false);\n                    state.tocheck2.value = newvalue;\n                    statemanager.setReadOnly(true);\n                },\n            },\n        });\n\n        // Component 1 only change the tocheck value.\n        reactive1.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck:updated',\n                    handler: ({element}) => {\n                        this.assertEquals(test3, 'newreactive1', element.value);\n                    }\n                },\n                {\n                    watch: 'tocheck2:updated',\n                    handler: () => {\n                        this.assertTrue(test5, false);\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                this.assertEquals(test1, 'reactive1', state.tocheck.value);\n                reactive1.dispatch('alter', 'newreactive1');\n            },\n        });\n\n        // Component 2 only change the tocheck2 value\n        reactive2.registerComponent({\n            getWatchers: () => [\n                {\n                    watch: 'tocheck2:updated',\n                    handler: ({element}) => {\n                        this.assertEquals(test6, 'newreactive2', element.value);\n                    }\n                },\n                {\n                    watch: 'tocheck:updated',\n                    handler: () => {\n                        this.assertTrue(test4, false);\n                    }\n                },\n            ],\n            stateReady: (state) => {\n                this.assertEquals(test2, 'reactive2', state.tocheck.value);\n                reactive2.dispatch('alter', 'newreactive2');\n            },\n        });\n    }\n\n    /**\n     * Test register component calls for dispatching registration events.\n     *\n     * @param {*} an object with:\n     * - watchers: the watchers list\n     * - correct: if the registering should pass\n     * - twice: if the component should be registered twice\n     *\n     */\n    testDispatchRegistration({watchers, correct, twice}) {\n        let test1 = this.addAssert('Registration event dispatched.', false);\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n        });\n\n        if (!correct) {\n            this.expectException();\n        }\n\n        const component = reactive.registerComponent({\n\n            getWatchers: () => {\n                return watchers;\n            },\n\n            dispatchRegistrationSuccess: () => {\n                this.assertTrue(test1, correct);\n            },\n\n            dispatchRegistrationFail: () => {\n                this.assertTrue(test1, !correct);\n            },\n        });\n\n        if (twice) {\n            // Create a new assert using the same variable to check if it assert a second time.\n            test1 = this.addAssert('Registration event dispatched twice.', false);\n            reactive.registerComponent(component);\n        }\n\n\n    }\n\n    /**\n     * Data provider of testDispatchRegistration.\n     *\n     * @returns {object} testing scenarios\n     */\n    dataProviderTestDispatchRegistration() {\n        return {\n            correct: {watchers: [], correct: true, twice: false},\n            correcttwice: {watchers: [], correct: true, twice: true},\n            nowatchwatcher: {watchers: [{watch: 'no_handler'}], correct: false, twice: false},\n            nowatchwatchertwice: {watchers: [{watch: 'no_handler'}], correct: false, twice: true},\n            nohandlewatcher: {watchers: [{watch: () => 'no_watch'}], correct: false, twice: false},\n            nohandlewatchertwice: {watchers: [{watch: () => 'no_watch'}], correct: false, twice: true},\n        };\n    }\n\n    /**\n     * Test unregister component.\n     */\n    testUnregisterComponent() {\n        let test1 = this.addAssert('Component is watching the state.', false);\n        let test2 = this.addAssert('Unregistered component stop watching the state.', true);\n\n        const reactive = new Reactive({\n            name: 'TestReactive',\n            eventName: this.eventName,\n            eventDispatch: this.eventDispatch,\n            state: {\n                tocheck: {value1: 'OK', value2: 'OK'},\n            },\n            mutations: {\n                alter: (statemanager, prop, newvalue) => {\n                    const state = statemanager.state;\n                    statemanager.setReadOnly(false);\n                    state.tocheck[prop] = newvalue;\n                    statemanager.setReadOnly(true);\n                },\n            },\n        });\n\n        const component = {\n            getWatchers: () => [\n                {\n                    watch: 'tocheck.value1:updated',\n                    handler: ({element}) => {\n                        this.assertEquals(test1, 'Perfect', element.value1);\n                        // Unregister and test.\n                        reactive.unregisterComponent(component);\n                        reactive.dispatch('alter', 'value2', 'Perfect');\n                    }\n                },\n                {\n                    watch: 'tocheck.value2:updated',\n                    handler: () => {\n                        this.assertTrue(test2, false);\n                    }\n                },\n            ],\n            stateReady: () => {\n                reactive.dispatch('alter', 'value1', 'Perfect');\n            }\n        };\n\n        reactive.registerComponent(component);\n\n    }\n}\n\nexport default new Test();\n"],"file":"reactive.min.js"}
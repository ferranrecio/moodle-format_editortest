{"version":3,"sources":["../../../src/local/tests/editor.js"],"names":["courseEditor","Test","NewMutations","test","internalValue","statemanager","testid","assertTrue","assertEquals","setMutations","test1","addAssert","Sample","descriptor","element","reactive","BaseComponent","init","target","test2","state","course","sectionlist","editmode","id","textvalue","test3","test4","dispatch","watch","handler","newvalue","addMutations","alter","name","value","setReadOnly","editing","isEditing","toggleedit","TestBase"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component.\n *\n * Important note: this is internal testing. Components should never user state manager or\n * reactive module directly. Only reactive instances can do it this way.\n *\n * @module     format_editortest/local/tests/statevalues\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport {BaseComponent} from 'core/reactive';\nimport TestBase from 'format_editortest/local/tests/testbase';\n\nconst courseEditor = getCurrentCourseEditor();\n\nclass Test extends TestBase {\n\n    /**\n     * Setup before execute the first test.\n     */\n    setUpBeforeTests() {\n\n        // The editor object is a singleton. If we want to override the mutations class\n        // we need to do it before starting the tests, otherwise the mutations will affect\n        // all tests if they execute some mutations on events or promises.\n        class NewMutations {\n\n            constructor(test) {\n                this.internalValue = 'Internal';\n                this.test = test;\n            }\n\n            mutationtest(statemanager, testid) {\n                this.test.assertTrue(testid, true);\n                this.test.assertEquals(null, 'Internal', this.internalValue);\n            }\n        }\n\n        courseEditor.setMutations(new NewMutations(this));\n    }\n\n    /**\n     * Test editor components state ready is called.\n     */\n    testCreate() {\n        const test1 = this.addAssert('Editor component create hook executed', false);\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n            }\n\n            static init(test, element) {\n                return new Sample({\n                    reactive: getCurrentCourseEditor(),\n                    element,\n                    test,\n                });\n            }\n        }\n\n        Sample.init(this, this.target);\n    }\n\n    /**\n     * Validate editor component gets the plugin specific state.\n     */\n    testInitialState() {\n        const test1 = this.addAssert('Editor component create hook executed', false);\n        const test2 = this.addAssert('Editor component state ready executed', false);\n\n        class Sample extends BaseComponent {\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n            }\n\n            static init(test, element) {\n                return new Sample({\n                    reactive: getCurrentCourseEditor(),\n                    element,\n                    test,\n                });\n            }\n\n            stateReady(state) {\n                this.test.assertTrue(test2, true);\n                // Validate some general values.\n                this.test.assertTrue(null, state.course.sectionlist !== undefined);\n                this.test.assertTrue(null, state.course.editmode !== undefined);\n                this.test.assertTrue(null, state.course.id !== undefined);\n                // Validate plugin specific value.\n                this.test.assertTrue(null, state.course.textvalue === 'Plugin value');\n            }\n        }\n\n        Sample.init(this, this.target);\n    }\n\n    /**\n     * Add mutations functions to the editor.\n     */\n    testAddMutations() {\n        const test1 = this.addAssert('Editor component create hook executed', false);\n        const test2 = this.addAssert('Editor component state ready executed', false);\n        const test3 = this.addAssert('Mutation executed', false);\n        const test4 = this.addAssert('Watcher executed', false);\n\n        class Sample extends BaseComponent {\n\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n            }\n\n            static init(test, element) {\n                return new Sample({\n                    reactive: getCurrentCourseEditor(),\n                    element,\n                    test,\n                });\n            }\n\n            stateReady() {\n                this.test.assertTrue(test2, true);\n\n                // Trigger state mutation.\n                this.reactive.dispatch('alter', 'newvalue', 'Perfect!');\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'course.newvalue:created',\n                        handler: ({element}) => {\n                            this.test.assertTrue(test4, element.newvalue === 'Perfect!');\n                        }\n                    },\n                ];\n            }\n        }\n\n        // Add some mutations.\n        courseEditor.addMutations({\n            alter: (statemanager, name, value) => {\n                this.assertTrue(test3, true);\n                const state = statemanager.state;\n                statemanager.setReadOnly(false);\n                state.course[name] = value;\n                statemanager.setReadOnly(true);\n            },\n        });\n\n        Sample.init(this, this.target);\n    }\n\n    /**\n     * Add a mutation class into the editor.\n     */\n    testAddMutationsClass() {\n        const test1 = this.addAssert('Mutation executed', false);\n\n        // Editor is a singleton instance, we add the\n        courseEditor.dispatch('mutationtest', test1);\n    }\n\n    /**\n     * Test isEditing method.\n     *\n     * Note: the editor module load the \"is editing\" value form the initial state but this could change\n     * over time if the user turn edit off in some other browser tab. We don't want this value to change suddenly\n     * so the editor offers a method to check the inmutable value.\n     */\n    testIsEditing() {\n        const test1 = this.addAssert('Editor component create hook executed', false);\n        const test2 = this.addAssert('Editor component state ready executed', false);\n        const test3 = this.addAssert('Mutation executed', false);\n        const test4 = this.addAssert('Is editing does not change over time', false);\n\n        class Sample extends BaseComponent {\n\n            create(descriptor) {\n                descriptor.test.assertTrue(test1, true);\n                this.test = descriptor.test;\n            }\n\n            static init(test, element) {\n                return new Sample({\n                    reactive: getCurrentCourseEditor(),\n                    element,\n                    test,\n                });\n            }\n\n            stateReady() {\n                this.test.assertTrue(test2, true);\n\n                // Save current value.\n                this.editing = courseEditor.isEditing;\n\n                // Trigger state mutation.\n                courseEditor.dispatch('toggleedit');\n            }\n\n            getWatchers() {\n                return [\n                    {\n                        watch: 'course.editmode:updated',\n                        handler: ({element}) => {\n                            this.test.assertEquals(test4, this.editing, courseEditor.isEditing);\n                            this.test.assertEquals(null, !this.editing, element.editmode);\n                        }\n                    },\n                ];\n            }\n        }\n\n        // Add some mutations.\n        courseEditor.addMutations({\n            toggleedit: (statemanager) => {\n                this.assertTrue(test3, true);\n                const state = statemanager.state;\n                statemanager.setReadOnly(false);\n                state.course.editmode = !state.course.editmode;\n                statemanager.setReadOnly(true);\n            },\n        });\n\n        Sample.init(this, this.target);\n    }\n}\n\nexport default new Test();\n"],"file":"editor.min.js"}
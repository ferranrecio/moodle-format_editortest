{"version":3,"sources":["../../../src/local/examples/renamer.js"],"names":["Component","name","selectors","INPUT","input","getElement","debounceddispatch","dispatchEvent","events","renamed","component","addEventListener","value","target","element","document","getElementById","reactive","courseEditor","BaseComponent"],"mappings":"u1DA6BqBA,CAAAA,C,+HAWR,CAEL,KAAKC,IAAL,CAAY,SAAZ,CAEA,KAAKC,SAAL,CAAiB,CACbC,KAAK,QADQ,CAGpB,C,+CAuBY,YAKHC,CAAK,CAAG,KAAKC,UAAL,CAAgB,KAAKH,SAAL,CAAeC,KAA/B,CALL,CAYHG,CAAiB,CAAG,eAAS,UAAM,CAMrC,CAAI,CAACC,aAAL,CACI,CAAI,CAACC,MAAL,CAAYC,OADhB,CAEI,CAACC,SAAS,CAAE,CAAZ,CAFJ,CAIH,CAVyB,CAUvB,GAVuB,CAZjB,CAwBT,KAAKC,gBAAL,CAAsBP,CAAtB,CAA6B,OAA7B,CAAsCE,CAAtC,CACH,C,0CAOQM,C,CAAO,CACZ,GAAMC,CAAAA,CAAM,CAAG,KAAKR,UAAL,CAAgB,KAAKH,SAAL,CAAeC,KAA/B,CAAf,CACA,GAAIU,CAAM,CAACD,KAAP,GAAiBA,CAArB,CAA4B,CACxBC,CAAM,CAACD,KAAP,CAAeA,CAClB,CACJ,C,2CAOU,CACP,MAAO,MAAKP,UAAL,CAAgB,KAAKH,SAAL,CAAeC,KAA/B,EAAsCS,KAChD,C,+CArFkB,CACf,MAAO,CACHH,OAAO,CAAE,qBADN,CAGV,C,kCAwBWI,C,CAAQX,C,CAAW,CAC3B,MAAO,IAAIF,CAAAA,CAAJ,CAAc,CACjBc,OAAO,CAAEC,QAAQ,CAACC,cAAT,CAAwBH,CAAxB,CADQ,CAEjBI,QAAQ,CAAEC,cAFO,CAGjBhB,SAAS,CAATA,CAHiB,CAAd,CAKV,C,cApCkCiB,e","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This is a subcomponent that can be reused in several compoments to\n * add a debounced input with a value.\n *\n * @module     format_editortest/local/examples/stateready\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {courseEditor} from 'core_course/courseeditor';\nimport {debounce} from 'core/utils';\n\nexport default class Component extends BaseComponent {\n\n    static getEvents() {\n        return {\n            renamed: 'renamevalue_changed',\n        };\n    }\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'renamer';\n        // Default query selectors.\n        this.selectors = {\n            INPUT: `input`,\n        };\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * We use a static method to prevent mustache templates to know which\n     * reactive instance is used.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: courseEditor,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        // In this case we don't care at all about the state. We simply use\n        // stateReady because is easier thant defining a onReady metdhos.\n        // To load the initial state the page should be ready.\n\n        const input = this.getElement(this.selectors.INPUT);\n\n        // This component will trigger an event. The BaseComponent class has a shortcut to trigger\n        // events. We can use this one or create a new one, it's up to you. The important point is that\n        // you use standard JS events and trigger them anchoring this.element with bubbling.\n\n        // In this we want to debounce the listener to prevent unnecessary state mutations.\n        const debounceddispatch = debounce(() => {\n            // Probably we would need some content check for savety, but I trust you won't\n            // add malitious content to any input field ;-).\n\n            // Passing the component as part of the event is the best way to let other\n            // components interact with you.\n            this.dispatchEvent(\n                this.events.renamed,\n                {component: this},\n            );\n        }, 250);\n\n        this.addEventListener(input, 'keyup', debounceddispatch);\n    }\n\n    /**\n     * A public method to set the input value.\n     *\n     * @param {string} value the new input value.\n     */\n    setValue(value) {\n        const target = this.getElement(this.selectors.INPUT);\n        if (target.value !== value) {\n            target.value = value;\n        }\n    }\n\n    /**\n     * Public method to get the input value.\n     *\n     * @returns {string} the current input value\n     */\n    getValue() {\n        return this.getElement(this.selectors.INPUT).value;\n    }\n}\n"],"file":"renamer.min.js"}
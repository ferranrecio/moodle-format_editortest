{"version":3,"sources":["../../../src/local/examples/lazycomponent.js"],"names":["Component","name","selectors","CONTENT","state","data","title","course","lazytext","target","getElement","renderComponent","log","error","element","document","getElementById","reactive","courseEditor","BaseComponent"],"mappings":"kOA0BA,uD,87DAGqBA,CAAAA,C,+HAKR,CAEL,KAAKC,IAAL,CAAY,eAAZ,CAEA,KAAKC,SAAL,CAAiB,CACbC,OAAO,uBADM,CAGpB,C,gFA2BgBC,C,oGAGHC,C,CAAO,CAACC,KAAK,CAAEF,CAAK,CAACG,MAAN,CAAaC,QAArB,C,CAOPC,C,CAAS,KAAKC,UAAL,CAAgB,KAAKR,SAAL,CAAeC,OAA/B,C,CACf,KAAKQ,eAAL,CAAqBF,CAArB,CAA6B,uDAA7B,CAAsFJ,CAAtF,E,mDAGAO,UAAIC,KAAJ,CAAU,gCAAV,E,uKA7BIJ,C,CAAQP,C,CAAW,CAC3B,MAAO,IAAIF,CAAAA,CAAJ,CAAc,CACjBc,OAAO,CAAEC,QAAQ,CAACC,cAAT,CAAwBP,CAAxB,CADQ,CAEjBQ,QAAQ,CAAEC,cAFO,CAGjBhB,SAAS,CAATA,CAHiB,CAAd,CAKV,C,cA9BkCiB,e","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component example.\n *\n * @module     format_editortest/local/examples/lazycomponent\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {courseEditor} from 'core_courseformat/courseeditor';\nimport log from 'core/log';\n\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'lazycomponent';\n        // Default query selectors.\n        this.selectors = {\n            CONTENT: `[data-for='content']`,\n        };\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * We use a static method to prevent mustache templates to know which\n     * reactive instance is used.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: courseEditor,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * Note in this case we want our stateReady to be async.\n     *\n     * @param {object} state the initial state\n     */\n    async stateReady(state) {\n        try {\n            // First we collect some data from the state.\n            const data = {title: state.course.lazytext};\n\n            // Components are regular mustache files with an AMD module. However, if a mustache file\n            // initialize a component you can use the renderComponent method to replace an element\n            // by a subcomponent. It is important to note that this method should not be used for loading\n            // regular mustache files as it returns a Promise that will only be resolved if the mustache has\n            // a component.\n            const target = this.getElement(this.selectors.CONTENT);\n            this.renderComponent(target, 'format_editortest/local/examples/lazycomponent/sample', data);\n\n        } catch (error) {\n            log.error('Cannot load component template');\n            throw error;\n        }\n    }\n}\n"],"file":"lazycomponent.min.js"}
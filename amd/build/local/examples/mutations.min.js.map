{"version":3,"sources":["../../../src/local/examples/mutations.js"],"names":["Component","name","selectors","BUTTON","state","button","getElement","addEventListener","_clickToggler","reactive","dispatch","target","element","document","getElementById","courseEditor","watcher"],"mappings":"4OAwBA,uD,88DAOqBA,CAAAA,C,+HAKR,CAEL,2CAEA,KAAKC,IAAL,CAAY,WAAZ,CAEA,KAAKC,SAAL,CAAeC,MAAf,uBACH,C,8CA0BUC,C,CAAO,CAEd,8CAAiBA,CAAjB,EAGA,GAAMC,CAAAA,CAAM,CAAG,KAAKC,UAAL,CAAgB,KAAKJ,SAAL,CAAeC,MAA/B,CAAf,CACA,KAAKI,gBAAL,CAAsBF,CAAtB,CAA8B,OAA9B,CAAuC,KAAKG,aAA5C,CACH,C,qDAKe,CAMZ,KAAKC,QAAL,CAAcC,QAAd,CAAuB,mBAAvB,CAA4C,YAA5C,CAKH,C,oCApCWC,C,CAAQT,C,CAAW,CAC3B,MAAO,IAAIF,CAAAA,CAAJ,CAAc,CACjBY,OAAO,CAAEC,QAAQ,CAACC,cAAT,CAAwBH,CAAxB,CADQ,CAEjBF,QAAQ,CAAEM,cAFO,CAGjBb,SAAS,CAATA,CAHiB,CAAd,CAKV,C,cA/BkCc,S","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Test component example.\n *\n * @module     format_editortest/local/examples/stateready\n * @package    core_course\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport watcher from 'format_editortest/local/examples/watcher';\nimport {courseEditor} from 'core_courseformat/courseeditor';\n\n/**\n * Instead of creating a full component, in this case we can extend watcher\n * component to inherit all the watchers and logic.\n */\nexport default class Component extends watcher {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Get all the dfefinition from the parent class.\n        super.create();\n        // Optional component name for debugging.\n        this.name = 'mutations';\n        // Add some more default selectors.\n        this.selectors.BUTTON = `[data-for='toggler']`;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * Even if we are extending another component, this method needs to be defined\n     * in every component. Otherwise, mustaches won't be able to init the component.\n     * A small prize to pay comparing with the amount of code we don't have to replicate.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: courseEditor,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        // In this case, we can reuse the same watchers metdhos as the parent class.\n        super.stateReady(state);\n\n        // Just bind a click listener to the component button.\n        const button = this.getElement(this.selectors.BUTTON);\n        this.addEventListener(button, 'click', this._clickToggler);\n    }\n\n    /**\n     * Event click listener for the toggler button.\n     */\n    _clickToggler() {\n        // Every content has a this.reactive to interact with the reactive\n        // module. This way all components has a more reusable code thant interacting\n        // with a specific reactive instance.\n\n        // This is the way a component ask for mutations.\n        this.reactive.dispatch('toggleCourseValue', 'samplebool');\n\n        // When you dispatch the action the reactive module will update the state\n        // and this will emit events to alert the watchers. We don't need to add\n        // any logic to refresh the interface because we have watchers for this.\n    }\n}\n"],"file":"mutations.min.js"}